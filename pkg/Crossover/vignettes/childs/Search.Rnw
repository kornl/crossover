<<set-parent-search, echo=FALSE, cache=FALSE, include=FALSE>>=
library(knitr)
set_parent('../Crossover.Rnw')
library(multcomp)
library(Crossover)
library(MASS)
library(xtable)
@

\chapter{Search strategy}\label{sec:search}
Monte-Carlo search for first candidates, followed by parallel hill
climbing search, extended by long jumps.

In the following graphic we see 100.000 design evaluations (that take
less than 7 seconds on my computer), consisting out of 20 hill
climbing search \emph{runs} from 20 different designs as starting
point which were selected by a Monte-Carlo search. We can see that 10
out of the 20 search runs were not able to achieve the efficieny the
other 10 achieved. We can see, that there were most likely at least
four local maxima the hill climbing search found and got stuck:

<<SearchStrategy, echo=TRUE, eval=TRUE, cache=TRUE, dev='png', dpi=150>>=

set.seed(42)
x <- searchCrossOverDesign(s=9, p=5, v=4, model=4)
plot(x)
plot(x, type=2)

@

%For a given cross-over design we create a row-column design, calculate the information matrix $A_r$ for this design from
%\[A_r=r^\delta-\tfrac{1}{s}N_pN_p'-\tfrac{1}{p}N_sN_s'+\tfrac{1}{ps}rr'.\]
%For details see \cite{j1995cyclic} and \cite{john2004crossover}.

<<attachNameSpace, echo=TRUE, eval=FALSE, include=FALSE>>=
 # We will use a lot of internal commands since we will test and evaluate things the normal user will probably not be interested in. Therefore we load and attach the namespace.
# attach(loadNamespace("Crossover"), name="namespace:Crossover", pos=3)
# When we are finished we call 'detach("namespace:Crossover")'.
@

\iffalse 
There are different approaches to calculate the Information matrix
$A_r$ of the row-column design.  In the following code fragment we
compare the two different approaches:

\[A_r=r^\delta-\tfrac{1}{s}N_pN_p'-\tfrac{1}{p}N_sN_s'+\tfrac{1}{ps}rr' \text{ and }\]
\[A_r=X_r'(I-P_z)X_r.\]
For details (what are $N_p$, $N_s$, $P_z$, etc.) see \cite{j1995cyclic} and \cite{john2004crossover}.

<<TestOfDifferentApproaches, echo=TRUE, eval=TRUE, withNameSpace=TRUE>>=

attach(list2env(as.list(asNamespace("Crossover"))), name="exposed:Crossover", pos=3, warn.conflicts=FALSE)

s <- 6
p <- 3
v <- 3
model <- 1
design <- getDesign("williams3t")
  
rcDesign <- rcd(design, v, model)
# JRW, p 2650, first equation on that page, whithout number
Ar <- infMatrix(rcDesign, v, model)
Xr <- rcdMatrix(rcDesign, v, model)
# JRW, p 2650, second equation on that page, number 11
Ar2 <- t(Xr) %*% (diag(s*p)-Crossover:::getPZ(s,p)) %*% Xr
max(abs(Ar-Ar2))

# Testing the Projection of Z: P_Z times Z should equal Z:
max(abs(Crossover:::getPZ(s,p)%*%getZ(s,p)-getZ(s,p)))

fXr <- cbind(Xr, getZ(s,p))
Ar3 <- t(fXr) %*% fXr
max(abs(ginv(Ar3)[1:12,1:12]-ginv(Ar2)))

H <- linkMatrix(model=model,v=v)
fX <- cbind(Xr%*%H, getZ(s,p))
A1 <- t(fX) %*% fX
A2 <- t(H)%*%Ar%*%H

# While A1 and A2 of course differ (max(abs(A1[1:6,1:6]-A2))=2):

ginv(A1)[1:6,1:6]
ginv(A2)
max(abs(ginv(A1)[1:6,1:6]-ginv(A2)))

max(abs(ginv(A1, tol=10^-15)[1:6,1:6]-ginv(A2, tol=10^-15)))

# The variances for the estimable contrasts are the same:

C <- matrix(0,nrow=15,ncol=1)
C[1:2,1] <- c(-1,1)
tdiff1 <- t(C)%*%ginv(A1)%*%C
tdiff2 <- t(C[1:6,])%*%ginv(A2)%*%C[1:6,]
tdiff1 - tdiff2

C <- matrix(0,nrow=6,ncol=1)
C[1:2,1] <- c(-1,1)
tdiff1 <- t(C)%*%ginv(A1)[1:6,1:6]%*%C
tdiff2 <- t(C)%*%ginv(A2)%*%C
tdiff1 - tdiff2

@
\fi 

\begin{Def}[Efficiency]\index{efficiency}
  If the difference of two treatments, replicated $r_1$ and $r_2$ times, is
  estimated in an \emph{ideal design} with residual variance
  $\sigma^2$, the variance of the estimated difference
  $\overline{y}\!_A-\overline{y}\!_B$ is
  \[V_I=\left(\frac{1}{r_1}+\frac{1}{r_2}\right)\sigma^2.\] 
  In a cross-over design the variance of a parameter estimates for $A$
  and $B$ are given by the corresponding elements $\sigma^2x_A$ and
  $\sigma^2x_B$ of
  \[\sigma^2(X^TX)^{-1}\]
  with $X$ the crossover design matrix. The variance of the difference
  is $\sigma^2 (x_A + x_B - 2*x_{AB})$ where $x_{AB}$ is the element
  of $X^TX$ specifying the covariance of the two treatment parameter
  estimates.  The efficiency
  is \[E:=\frac{V_I}{V_C}=\frac{r_1+r_2}{r_1r_2(x_A + x_B - 2*x_{AB})}\;\in[0,1].\]
\end{Def}

If we have a model with $n$ parameters and a contrast matrix $C\in\R^{n\times n}$, the sum of the variances of the linear combinations given by $C$ is
\[\trace(CH^TA_rHC^T).\]


\section*{Example for two treatments}

<<include=FALSE>>=
data(exampleSearchResults2t)
@

We compare our results with results from the algorithm of \cite{john2004crossover} that are presented in \cite[table~4.35-4.38, p.~202ff]{jones2003design} for s=6 sequences, p=4 periods and v=2 treatments under the constraint that each treatment should occur 12 times.

The following shows all designs that were found. For some models the algorithm always returned only one design, but for some 2 or even 3 equally good designs were found.

Here are all the designs as found by the above code. Actually there are only \Sexpr{length(unique(resultL))} different designs, since the following designs were already found for other models: \Sexpr{which(duplicated(resultL))}.

\vspace*{1cm}

<<echo=FALSE, results='asis'>>=

options(xtable.include.rownames=FALSE, xtable.include.colnames=FALSE, xtable.floating=FALSE)

df <- c()

for (i in 1:length(resultL)) { 
  design <- resultL[[i]]
  cat("Design ",i,":\n")
  print(xtable(design, digits=0)) 
  var <- c()
  var2 <- c()
  for (m in models[1:8]) {
    
    #C <- Crossover:::contrMat2(type="Tukey", v=2, model=m, eff.factor=c(1,1,1))
    #C <- contrMat(rep(1, Crossover:::nrOfParameters(model=i, v=v)), "Tukey")
    
    if (Crossover:::estimable_R(design, v=2, model=m)) {
      var <- c(var, general.carryover(design, model=m)$Var.trt.pair[1,2]/4)      
    } else {
      var <- c(var, NA)      
    }
  }
  df <- rbind(df, var)  
}

rownames(df) <- NULL
df <- as.data.frame(df)
colnames(df) <- c("Additive", "Self-adjacency", "Proportional", "Placebo", "No into self", "Decay", "Interaction", "2nd-order carry-over")
df <- cbind(data.frame(Design=1:length(resultL)), df)

options(xtable.include.colnames=TRUE, xtable.NA.string="Not estimable")

cat("\\[\\]")

cat("\\scriptsize")

print(xtable(df, digits=3))

# cat("\\[\\]")
# print(xtable(df2, digits=3))
# max(abs(df-df2))

@

\normalsize

Note that for the full interaction model and the self-adjacency model we get the same results, because they are essentially the same models with \begin{equation*}
\begin{split}
\lambda^{SA}_1&=\lambda^{FI}_1+\gamma^{FI}_{12},\\
\lambda^{SA}_2&=\lambda^{FI}_2+\gamma^{FI}_{21},\\
\phi^{SA}_1&=\lambda^{FI}_1+\gamma^{FI}_{11},\text{ and}\\
\phi^{SA}_2&=\lambda^{FI}_2+\gamma^{FI}_{22}.
\end{split}
\end{equation*}

For the treatment decay model the algorithm provided us with a design where the treatment decay effect never occurs. Let's give a little bit of weight to this treatment decay effect:

<<echo=FALSE, include=FALSE, eval=FALSE>>=

TRIES <- 25
resultSubL <- list()
i <- 6
model <- models[i]
cat("======= ", model, " =======","\n")
for (k in 1:TRIES) {
  result <- sortDesign(getDesign(searchCrossOverDesign(s=s, p=p, v=v, model=model, v.rep=c(12,12), eff.factor=c(1,0.01), contrast="Tukey"))) #, start.designs=list(designs[[i]]))
  already.found <- FALSE
  for (design in resultSubL) {
    if (all(result==design)) already.found <- TRUE
  }
  if (!already.found) {
    resultSubL <- c(resultSubL, list(result))
    print(getDesign(result))
    cat("\nTreatment: ", general.carryover(designs[[i]], model=i)$Var.trt.pair[1,2]/4, "(literature) vs. ", general.carryover(result, model=i)$Var.trt.pair[1,2]/4,"\n")
    gco <- general.carryover(designs[[i]], model=i)
    if (!is.null(dim(gco[[2]]))) {
      cat("(1st) Carryover: ", gco[[2]][1,2]/4, "(literature) vs. ", general.carryover(result, model=i)[[2]][1,2]/4,"\n\n")
    }
    cat(paste("designB",i,sep=""), "<-", Crossover:::dputMatrix(getDesign(result)))        
  }
}
#resultL <- c(resultL, resultSubL)
#save(resultL, file="resultL.RData")

@


As we can see we find the design from the book, when we give weights 100:1 for treatment / carry-over effects in the treatment decay model.
(As seen in the first result section a zero weight for the carry-over effects results in a model with alternating treatments, so that there never occurs a treatment decay effect.)

\subsubsection*{Summary}


<<bibtex-search, results='asis', echo=FALSE>>=
if (!exists("bibCall")) {
  # RStudio / bibtex / knitr child document workaround from http://tex.stackexchange.com/questions/31373/citations-with-no-bibliography-at-the-end
  cat("\\newsavebox\\mytempbib \\savebox\\mytempbib{\\parbox{\\textwidth}{\\bibliography{../literatur}}}")
}
@
